# -*- coding: utf-8 -*-
"""blood_vessel_segmentation_augmented_data_may24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IatABSpcYk_xroYfDsBJg37hU5KZ5ijF

This code is adapted from [kaggle notebook Semantic Segmentation is easy](https://https://www.kaggle.com/code/ligtfeather/semantic-segmentation-is-easy-with-pytorch)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms as T
import torchvision
import torch.nn.functional as F
from torch.autograd import Variable
from torch.nn.functional import normalize
from sklearn.model_selection import train_test_split

import tifffile
from PIL import Image
import cv2

import time
import os
from tqdm.notebook import tqdm

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

!pip install segmentation-models-pytorch --quiet

import segmentation_models_pytorch as smp

model = smp.Unet(
    encoder_name="resnet34",        # choose encoder, e.g. mobilenet_v2 or efficientnet-b7
    encoder_weights="imagenet",     # use `imagenet` pre-trained weights for encoder initialization
    in_channels=3,
    activation = None,               # model input channels (1 for gray-scale images, 3 for RGB, etc.)
    encoder_depth =5,
    decoder_channels = [256,128,64,32,16],
    classes=20,                      # model output channels (number of classes in your dataset)
)

torch.save(model, 'Unet_Resnet_base_model.pt')

#print(model.summary())

"""### Access Images and Masks"""

IMAGE_PATH = "/content/drive/MyDrive/BBB/images2/"
len(os.listdir(IMAGE_PATH))

MASK_PATH = "/content/drive/MyDrive/BBB/masks2/"
len(os.listdir(MASK_PATH))

import torchvision.transforms as transforms

"""We have to now frame the dataset class for our images"""

def create_df(path):
    name = []
    shape = []
    for dirname, _, filenames in os.walk(path):
      filenames.sort()
      for filename in filenames:
          name.append(filename[:-4])
          img_file = cv2.imread(os.path.join(path,filename))
          shape.append(img_file.shape)

    return pd.DataFrame({'id': name,'shape':shape}, index = np.arange(0, len(name)))

image_df = create_df(IMAGE_PATH)
print('Total Images: ', len(image_df))

image_df.head()

mask_df = create_df(MASK_PATH)
print('Total Images: ', len(mask_df))

mask_df.head()

#split data
X_train, X_test = train_test_split(image_df['id'].values, test_size=0.1, random_state=19)

print('Train Size   : ', len(X_train))
print('Test Size    : ', len(X_test))

image_df['id'][10]

img = Image.open(IMAGE_PATH + image_df['id'][210] + '.png')
mask = Image.open(MASK_PATH + mask_df['id'][210] + '.png')
print('Image Size', np.asarray(img).shape)
print('Mask Size', np.asarray(mask).shape)

fig,ax = plt.subplots(1,2,figsize = (5,5))
ax = ax.ravel()
ax[0].imshow(img)
ax[0].set_title('tissue')
ax[1].imshow(mask)
ax[1].set_title('mask')
plt.show()

img = np.array(img)
mask = np.array(mask)

np.unique(mask)

img.shape,mask.shape

mask.ndim

"""### DATASET"""

class SlideDataset(Dataset):
    def __init__(self, img_path, mask_path, X, transform=None, patch=False):
        self.img_path = img_path
        self.mask_path = mask_path
        self.X = X
        self.transform = transform
        self.patches = patch

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        img = cv2.imread(self.img_path + self.X[idx] + '.png')
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        mask = cv2.imread(self.mask_path + self.X[idx] + '.png')
        mask = cv2.cvtColor(mask,cv2.COLOR_BGR2GRAY)

        # convert to torch
        img = torch.from_numpy(img).float()
        img = normalize(img,dim=0)
        img = torch.permute(img,(2,0,1))

        mask = torch.from_numpy(mask).long()
        # print(f"dataset image shape is {img.shape}")
        # print(f"dataset image type is {img.dtype}")
        # print(f"dataset mask shape is {mask.shape}")
        # print(f"dataset mask type is {mask.dtype}")
        return img, mask

slide = SlideDataset(IMAGE_PATH,MASK_PATH,X_train)

slide_img,slide_mask = slide.__getitem__(10)

"""#### The mask has been re-mapped to less than the 20 classes in the model"""

slide_img.shape, slide_mask.shape

torch.unique(slide_mask)

fig,ax = plt.subplots(1,2,figsize = (5,5))
ax = ax.ravel()
ax[0].imshow(torch.permute(slide_img,(1,2,0))*10 + 0.2)
ax[0].set_title('slide_image')
ax[1].imshow(slide_mask)
ax[1].set_title('slide_mask')
plt.show()

# datasets
train_set = SlideDataset(IMAGE_PATH, MASK_PATH, X_train)
test_set = SlideDataset(IMAGE_PATH, MASK_PATH, X_test)

# dataloader
batch_size= 5

train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=True)

len(train_set)

len(train_loader)

dummy_img, dummy_mask = next(iter(train_loader))

dummy_img.shape,dummy_mask.shape



"""#### call the model without training"""

def predict_image_mask(model, image, mask):
    img_x = image.shape[0]
    img_y = image.shape[1]
    #mask = cv2.cvtColor(mask,cv2.COLOR_BGR2GRAY)
    #mask = cv2.resize(mask,(img_x,img_y),cv2.INTER_LINEAR)
    model.eval()
    #image = torch.from_numpy(image).float()
    #mask = torch.from_numpy(mask).long()
    #print(f"image shape is {img.shape}")
    #image = normalize(image,dim=0)
    #image = torch.permute(image,(2,0,1))

    model.to(device); image=image.to(device)
    mask = mask.to(device)
    with torch.no_grad():

        #image = image.unsqueeze(0)
        #mask = mask.unsqueeze(0)
        output = model(image)
        print(f"output shape {output.shape}")
        masked = torch.argmax(output, dim=1)
        print(f"masked shape {masked.shape}")
        masked = masked.cpu().squeeze(0)
    return mask,output,masked

dummy_img.shape,mask.shape,predicted_mask.shape

dummy_img = torch.permute(dummy_img,(0,2,3,1))
dummy_img = dummy_img[0,:,:,:]
dummy_img.shape

predicted_mask = predicted_mask[0,:,:]
predicted_mask.shape

mask = mask[0,:,:]
mask.shape

"""#### plot the output"""

fig,ax = plt.subplots(1,3,figsize = (5,5))
ax = ax.ravel()
ax[0].imshow(dummy_img*10+0.001)
ax[0].set_title('image')
ax[1].imshow(mask)
ax[1].set_title('mask')
ax[2].imshow(predicted_mask)
ax[2].set_title('predicted_mask')
plt.tight_layout()
plt.show()

"""### Training"""

def pixel_accuracy(output, mask):
    with torch.no_grad():
        output = torch.argmax(F.softmax(output, dim=1), dim=1)
        correct = torch.eq(output, mask).int()
        accuracy = float(correct.sum()) / float(correct.numel())
    return accuracy

def mIoU(pred_mask, mask, smooth=1e-10, n_classes=20):
    with torch.no_grad():
        pred_mask = F.softmax(pred_mask, dim=1)
        pred_mask = torch.argmax(pred_mask, dim=1)
        pred_mask = pred_mask.contiguous().view(-1)
        mask = mask.contiguous().view(-1)

        iou_per_class = []
        for clas in range(0, n_classes): #loop per pixel class
            true_class = pred_mask == clas
            true_label = mask == clas

            if true_label.long().sum().item() == 0: #no exist label in this loop
                iou_per_class.append(np.nan)
            else:
                intersect = torch.logical_and(true_class, true_label).sum().float().item()
                union = torch.logical_or(true_class, true_label).sum().float().item()

                iou = (intersect + smooth) / (union +smooth)
                iou_per_class.append(iou)
        return np.nanmean(iou_per_class)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit(epochs, model, train_loader, test_loader, criterion, optimizer, scheduler, patch=False):
    torch.cuda.empty_cache()
    train_losses = []
    test_losses = []
    test_iou = []; test_acc = []
    train_iou = []; train_acc = []
    lrs = []
    min_loss = np.inf
    decrease = 1 ; not_improve=0

    model.to(device)
    fit_time = time.time()
    for e in range(epochs):
        since = time.time()
        running_loss = 0
        iou_score = 0
        accuracy = 0
        #training loop
        model.train()
        for i, data in enumerate(tqdm(train_loader)):
            #training phase
            image_tiles, mask_tiles = data
            image = image_tiles.to(device); mask = mask_tiles.to(device);
            #forward
            #print(f"image {image.shape}")
            #print(f"mask {mask.shape}")
            output = model(image)
            #output = torch.argmax(output, dim = 1)
            #print(f"output {output.shape}")
            loss = criterion(output, mask)
            #evaluation metrics
            iou_score += mIoU(output, mask)
            accuracy += pixel_accuracy(output, mask)
            #backward
            loss.backward()
            optimizer.step() #update weight
            optimizer.zero_grad() #reset gradient

            #step the learning rate
            lrs.append(get_lr(optimizer))
            scheduler.step()

            running_loss += loss.item()

        else:
            model.eval()
            test_loss = 0
            test_accuracy = 0
            test_iou_score = 0
            #validation loop
            with torch.no_grad():
                for i, data in enumerate(tqdm(test_loader)):
                    #reshape to 9 patches from single image, delete batch size
                    image_tiles, mask_tiles = data
                    image = image_tiles.to(device); mask = mask_tiles.to(device);
                    output = model(image)
                    #output = torch.argmax(output,dim = 1)
                    loss = criterion(output, mask)
                    #evaluation metrics
                    test_iou_score +=  mIoU(output, mask)
                    test_accuracy += pixel_accuracy(output, mask)
                    #loss
                    loss = criterion(output, mask)
                    test_loss += loss.item()

            #calculatio mean for each batch
            train_losses.append(running_loss/len(train_loader))
            test_losses.append(test_loss/len(test_loader))


            if min_loss > (test_loss/len(test_loader)):
                print('Loss Decreasing.. {:.3f} >> {:.3f} '.format(min_loss, (test_loss/len(test_loader))))
                min_loss = (test_loss/len(test_loader))
                decrease += 1
                if decrease % 5 == 0:
                    print('saving model...')
                    torch.save(model, 'Unet-Resnet_v2_mIoU-{:.3f}.pt'.format(test_iou_score/len(test_loader)))


            if (test_loss/len(test_loader)) > min_loss:
                not_improve += 1
                min_loss = (test_loss/len(test_loader))
                print(f'Loss Not Decrease for {not_improve} time')
                if not_improve == 7:
                    print('Loss not decrease for 7 times, Stop Training')
                    break

            #iou
            test_iou.append(test_iou_score/len(test_loader))
            train_iou.append(iou_score/len(train_loader))
            train_acc.append(accuracy/len(train_loader))
            test_acc.append(test_accuracy/ len(test_loader))
            print("Epoch:{}/{}..".format(e+1, epochs),
                  "Train Loss: {:.3f}..".format(running_loss/len(train_loader)),
                  "Test Loss: {:.3f}..".format(test_loss/len(test_loader)),
                  "Train mIoU:{:.3f}..".format(iou_score/len(train_loader)),
                  "Test mIoU: {:.3f}..".format(test_iou_score/len(test_loader)),
                  "Train Acc:{:.3f}..".format(accuracy/len(train_loader)),
                  "Test Acc:{:.3f}..".format(test_accuracy/len(test_loader)),
                  "Time: {:.2f}m".format((time.time()-since)/60))

    history = {'train_loss' : train_losses, 'test_loss': test_losses,
               'train_miou' :train_iou, 'test_miou':test_iou,
               'train_acc' :train_acc, 'test_acc':test_acc,
               'lrs': lrs}
    print('Total time: {:.2f} m' .format((time.time()- fit_time)/60))
    return history

max_lr = 1e-3
epoch = 30
weight_decay = 1e-4

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.AdamW(model.parameters(), lr=max_lr, weight_decay=weight_decay)
sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epoch,
                                            steps_per_epoch=len(train_loader))

history = fit(epoch, model, train_loader, test_loader, criterion, optimizer, sched)

torch.save(model, 'Unet-Resnet-18_may_24.pt')

model = torch.load('Unet-Resnet-18_may_24.pt')

def plot_loss(history):
    plt.plot(history['test_loss'], label='test', marker='o')
    plt.plot( history['train_loss'], label='train', marker='o')
    plt.title('Loss per epoch'); plt.ylabel('loss');
    plt.xlabel('epoch')
    plt.legend(), plt.grid()
    plt.show()

def plot_score(history):
    plt.plot(history['train_miou'], label='train_mIoU', marker='*')
    plt.plot(history['test_miou'], label='test_mIoU',  marker='*')
    plt.title('Score per epoch'); plt.ylabel('mean IoU')
    plt.xlabel('epoch')
    plt.legend(), plt.grid()
    plt.show()

def plot_acc(history):
    plt.plot(history['train_acc'], label='train_accuracy', marker='*')
    plt.plot(history['test_acc'], label='test_accuracy',  marker='*')
    plt.title('Accuracy per epoch'); plt.ylabel('Accuracy')
    plt.xlabel('epoch')
    plt.legend(), plt.grid()
    plt.show()

plot_loss(history)
plot_score(history)
plot_acc(history)



img_name = "008.png_crop_3788"
image = cv2.imread(IMAGE_PATH + img_name + '.png')
mask = cv2.imread(MASK_PATH + img_name + '.png')

def predict_image_mask(model, image, mask):
    img_x = image.shape[0]
    img_y = image.shape[1]
    mask = cv2.cvtColor(mask,cv2.COLOR_BGR2GRAY)
    mask = cv2.resize(mask,(img_x,img_y),cv2.INTER_LINEAR)
    model.eval()
    image = torch.from_numpy(image).float()
    mask = torch.from_numpy(mask).long()
    #print(f"image shape is {img.shape}")
    image = normalize(image,dim=0)
    image = torch.permute(image,(2,0,1))

    model.to(device); image=image.to(device)
    mask = mask.to(device)
    with torch.no_grad():

        image = image.unsqueeze(0)
        mask = mask.unsqueeze(0)
        output = model(image)
        print(f"output shape {output.shape}")
        masked = torch.argmax(output, dim=1)
        print(f"masked shape {masked.shape}")
        masked = masked.cpu().squeeze(0)
    return mask,output,masked

mask,output,predicted_mask = predict_image_mask(model,image,mask)

mask.shape

fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(20,10))
ax1.imshow(image)
ax1.set_title('tissue');

ax2.imshow(mask.squeeze(0))
ax2.set_title('mask')
ax2.set_axis_off()

ax3.imshow(predicted_mask)
ax3.set_title('predicted_mask')
ax3.set_axis_off()

"""Test with our mouse brain tumor image"""

image = tifffile.imread('Image_1_he.tif')

image1 = cv2.imread('Image_1_HE.jpg') # image has to be divisible by 32
image1.shape

ls

image2 = cv2.imread('8968 - 2023.tif') # image has to be divisible by 32
image2.shape

def calc_resize(image):
  img_x = image.shape[0]//32
  img_y = image.shape[1]//32
  rem_x = img_x%32
  rem_y = img_y%32
  if rem_x !=0:
    print(f"remainder {rem_x}")
    print(f"resize X to {img_x*32}")
  else:
    print("X divides by 32")
  if rem_y !=0:
    print(f"remainder {rem_y}")
    print(f"resize Y to {img_y*32}")
  else:
    print("Y divides by 32")

calc_resize(image1)

calc_resize(image2)

image1 = cv2.resize(image1,(896,896),cv2.INTER_LINEAR)
image2 = cv2.resize(image2,(896,896),cv2.INTER_LINEAR)



def predict_mouse_bv(model, image):
    model.eval()
    image = torch.from_numpy(image).float()
    image = normalize(image,dim=0)
    image = torch.permute(image,(2,0,1))

    model.to(device); image=image.to(device)
    with torch.no_grad():
        image = image.unsqueeze(0)
        output = model(image)
        print(f"output shape {output.shape}")
        masked = torch.argmax(output, dim=1)
        print(f"masked shape {masked.shape}")
        masked = masked.cpu().squeeze(0)
    return masked

predicted_mask = predict_mouse_bv(model,image1)

fig,ax = plt.subplots(1,2,figsize = (15,15))
ax = ax.ravel()
ax[0].imshow(image1)
ax[0].set_title('tissue')
ax[1].imshow(predicted_mask)
ax[1].set_title('predicted_mask')
plt.show()

predicted_mask = predict_mouse_bv(model,image2)

fig,ax = plt.subplots(1,2,figsize = (15,15))
ax = ax.ravel()
ax[0].imshow(image2)
ax[0].set_title('tissue')
ax[1].imshow(predicted_mask)
ax[1].set_title('predicted_mask')
plt.show()